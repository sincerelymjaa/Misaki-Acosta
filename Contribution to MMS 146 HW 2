# The succeeding lines are Misaki Acosta's contribution to this assignment.
# This is the code for Class 5: K-Pop Album
class KPopAlbum:
# Attributes of K-Pop Album Class
    def __init__(self, v, p, pc, pb, c):
        self.version = v
        self.poster = p
        self.photocard = pc 
        self.photobook = pb 
        self.cd = c 

# Methods for K-Pop Album Class
    def identify_variation(self):
        self.version = self.version
    
    def unroll_poster(self):
        self.poster = self.poster
    
    def draw_random_photocard(self):
        self.photocard = self.photocard
        
    def browse_photobook(self):
        self.photobook = self.photobook
        
    def play_cd(self):
        self.cd = self.cd 

# Created Different K-Pop Album Variations
albumone = KPopAlbum("artbook","flat displaying a group photo", "Andy Park", "Page 3", "Track 11")
albumtwo = KPopAlbum("vending machine", "flat displaying a photo of Donghyuck and Injun", "Taeraesa Kim", "Page 23", "Track 1")
albumthree = KPopAlbum("limited", "flat displaying a photo of Haobin", "Sky Kim", "Page 14", "Track 5")
albumfour = KPopAlbum("digipack", "flat displaying a photo of Jiwoon", "Seok Woohyun", "Page 28", "Track 10")
albumfive = KPopAlbum("jewel case", "flat displaying a photo of Shun, Kyo, and Ken", "Hannah Bhang", "Page 8", "Track 8")
print (albumone.version)
print (albumtwo.poster)
print (albumthree.photocard)
print (albumfour.photobook)
print (albumfive.cd)

"""
After running the code above, it will display the album version, poster image, photocard version (which shows the name of the K-Pop Idol), photobook page, and track played on the album CD.
I made five album variations to show the randomness of the inclusions that come with every K-Pop Album.
I am only describing the inclusions; hence, there is no numerical change or increase in value.
"""

# This is the code for Class 6: Digital Camera
class DigiCam:
# Attributes of Digital Camera Class
    def __init__(self, l, f, vf, s, mc):
        self.lens = l
        self.flash = f
        self.viewfinder = vf 
        self.shutter = s
        self.memorycard = mc 

# Methods for Digital Camera Class
    def change_lens(self):
        self.lens = self.lens + 10
    
    def adjust_flash(self):
        self.flash = self.flash + 0.5
        
    def peek_through_viewfinder(self):
        self.viewfinder = self.viewfinder
    
    def press_shutter(self):
        self.shutter = self.shutter
        
    def insert_memorycard(self):
        self.memorycard = self.memorycard + 256

# Created a Camera Object
camera = DigiCam(360, 9, "You saw the white sandy beach through the viewfinder", "The shutter was pressed", 0)
print ("Before change lens:", camera.lens)
camera.change_lens()
print ("After change lens:", camera.lens)
print ("Before adjust flash:", camera.flash)
camera.adjust_flash()
print ("After adjust flash:", camera.flash)
print (camera.viewfinder)
print (camera.shutter)
print ("Before insert memory card:", camera.memorycard)
camera.insert_memorycard()
print ("After insert memory card:", camera.memorycard)

"""
After running the code above, it will display the change in the numerical value of the lens millimeter (which affects the focal length of the camera), flash value, and memory card storage value. It also describes what a person can see through their viewfinder and if the camera's shutter is pressed.
I tried simulating the way a person uses a camera through code.
"""

# This is the code for Class 7: Guitar
class Guitar:
# Attributes of Guitar Class
    def __init__(self, st, fb, t, b, n):
        self.strings = st
        self.fretboard = fb
        self.type = t 
        self.body = b
        self.neck = n

# Methods for Guitar Class
    def tune_strings(self):
        self.strings = self.strings + 1
    
    def strum_chord(self):
        self.fretboard = self.fretboard
    
    def determine_type(self):
        self.type = self.type
        
    def knock_on_body(self):
        self.body = self.body
        
    def hold_neck(self):
        self.neck = self.neck

# Created a Guitar Object
guitarnitaerae = Guitar(0, "You strummed the G Chord", "Yamada Acoustic Guitar", "You knocked on your guitar's body", "You are holding your guitar by its neck")
print ("Before tune strings:", guitarnitaerae.strings)
guitarnitaerae.tune_strings()
print ("After tune strings:", guitarnitaerae.strings)
print(guitarnitaerae.fretboard)
print(guitarnitaerae.type)
print(guitarnitaerae.body)
print(guitarnitaerae.neck)

"""
After running the code above, it will display the increase in the numerical value of the tuned chord. This change simulates the increase in the chord's pitch once you twist the tuning peg for that chord.
The code also describes the different actions a person does with their guitar. It also notes the guitar type. I had to modify one of the methods so that all of the attributes have a corresponding method.
"""

# This is the code for Class 8: Computer Mouse
class CompMouse:
# Attributes of Computer Mouse Class
    def __init__(self, c, w, wh, bt, tp):
        self.color = c
        self.weight = w
        self.wheel = wh 
        self.button = bt
        self.type = tp

# Methods for Computer Mouse Class
    def see_color(self):
        self.color = self.color 
    
    def discover_weight(self):
        self.weight = self.weight + 4.23

    def scroll_up(self):
        self.wheel = self.wheel
    
    def click_left_button(self):
        self.button = self.button
        
    def determine_type(self):
        self.type = self.type

# Created a Mouse Object
desktopmouse = CompMouse("black", 0, "You scrolled up", "You left-clicked", "wireless mouse")
print(desktopmouse.color)
print ("Before discover weight:", desktopmouse.weight)
desktopmouse.discover_weight()
print ("After discover weight:", desktopmouse.weight)
print(desktopmouse.wheel)
print(desktopmouse.button)
print(desktopmouse.type)

""" 
After running the code above, it will display the color, weight, and type of the Computer Mouse. The code also describes the actions taken by the person if they use the mouse wheel to scroll and click its button.
I had to modify one of the methods so that all of the attributes have a corresponding method.
"""
